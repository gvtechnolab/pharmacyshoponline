/* Core */
import { createSlice, type PayloadAction } from "@reduxjs/toolkit";

/* Instruments */
// import { incrementAsync } from "./thunks";

const initialState: WishlistSliceState = {
  value: [],
  status: "idle",
};

export const wishlistSlice = createSlice({
  name: "wishlist",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    addtowishlist: (state, action: PayloadAction<object>) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state = { ...state, value: [...state.value, action?.payload] };
    },
    removefromwishlist: (state, action: PayloadAction<object>) => {
      state = {
        ...state,
        value: [
          ...state.value.filter((item: object) => item !== action?.payload),
        ],
      };
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    // incrementByAmount: (state, action: PayloadAction<number>) => {
    //   state.value += action.payload;
    // },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  // extraReducers: (builder) => {
  //   builder
  //     .addCase(incrementAsync.pending, (state) => {
  //       state.status = "loading";
  //     })
  //     // .addCase(incrementAsync.fulfilled, (state, action) => {
  //     //   state.status = "idle";
  //     //   state.value += action.payload;
  //     // });
  // },
});

/* Types */
export interface WishlistSliceState {
  value: object[];
  status: "idle" | "loading" | "failed";
}
